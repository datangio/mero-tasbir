generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?

  @@map("admins")
}

model hero_sections {
  id              String   @id @default(cuid())
  title           String
  subtitle        String
  description     String
  backgroundImage String?
  ctaText         String   @default("Get Started")
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rotatingTexts   Json?

  @@map("hero_sections")
}

model Course {
  id             String   @id @default(cuid())
  title          String
  description    String
  instructor     String
  duration       String
  schedule       String
  level          String
  tags           String[]
  image          String?
  price          Float
  originalPrice  Float?
  discount       Float?
  whatYoullLearn String[]
  prerequisites  String[]
  curriculum     Json
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("courses")
}

model MarketplaceItem {
  id             String   @id @default(cuid())
  title          String
  description    String
  category       String
  subcategory    String?
  price          Float
  originalPrice  Float?
  discount       Float?
  currency       String   @default("NPR")
  images         String[]
  tags           String[]
  specifications Json?
  itemType       String   @default("sale")
  condition      String   @default("new")
  availability   String   @default("in_stock")
  quantity       Int      @default(1)
  rating         Float    @default(0)
  reviewCount    Int      @default(0)
  seller         Json
  location       Json?
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  views          Int      @default(0)
  likes          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("marketplace_items")
}

model EventHero {
  id          String   @id @default(cuid())
  title       String
  description String
  mediaUrl    String   // For image or video URL
  mediaType   String   @default("image") // "image" or "video"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("event_hero")
}

model FeaturedEvent {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("featured_events")
}

model EventPackage {
  id            String   @id @default(cuid())
  name          String
  price         Float
  discountPrice Float?
  description   String
  features      Json     // Store as JSON array
  maxGuests     Int
  isPopular     Boolean  @default(false)
  icon          String   // Base64 encoded icon or URL
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("event_packages")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String?
  eventType       EventType
  eventDate       DateTime
  startTime       String?
  endTime         String?
  duration        Int?     // Duration in hours
  location        String
  address         String?
  city            String?
  state           String?
  country         String?
  expectedGuests  Int?
  minGuests       Int?
  maxGuests       Int?
  basePrice       Float?
  discountAmount  Float?   @default(0)
  finalPrice      Float?
  totalPrice      Float?
  contactName     String
  contactEmail    String
  contactPhone    String?
  specialRequests String?
  dietaryRestrictions String?
  accessibilityNeeds String?
  internalNotes   String?
  adminNotes      String?
  status          EventStatus @default(DRAFT)
  images          String[]
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  cateringServices EventCateringService[]
  equipmentRentals EventEquipmentRental[]

  @@map("events")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  fullName        String
  address         String
  password        String
  userType        String   // "user" or "freelancer"
  isEmailVerified Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("users")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

// Enums
enum EventType {
  WEDDING
  CORPORATE
  BIRTHDAY
  ANNIVERSARY
  CONFERENCE
  PARTY
  OTHER
}

enum EventStatus {
  DRAFT
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  PUBLISHED
}

enum EquipmentCategory {
  PHOTOGRAPHY
  VIDEOGRAPHY
  LIGHTING
  SOUND
  SOUND_SYSTEM
  STAGING
  DECORATION
  FURNITURE
  KITCHEN
  OTHER
}

enum EquipmentStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  OUT_OF_SERVICE
}

enum CateringCategory {
  VEGETARIAN
  NON_VEGETARIAN
  VEGAN
  CONTINENTAL
  NEPALI
  INDIAN
  CHINESE
  FOOD
  BEVERAGE
  DESSERT
  OTHER
}

// Media model
model Media {
  id           String   @id @default(cuid())
  title        String
  description  String?
  url          String
  type         String   // "image", "video", "audio", "document"
  category     String   // "portfolio", "gallery", "document", etc.
  size         Int?     // File size in bytes
  mimeType     String?
  tags         String[]
  originalName String?
  clientName   String?
  uploadedBy   String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media")
}

// Catering Service model
model CateringService {
  id                    String           @id @default(cuid())
  name                  String
  description           String?
  category              CateringCategory
  price                 Float
  basePrice             Float?
  pricePerPerson        Float?
  minOrderQuantity      Int?
  maxOrderQuantity      Int?
  preparationTime       Int?             // in minutes
  servingStyle          String?
  dietaryInfo           String[]
  allergens             String[]
  availableDays         String[]
  advanceBookingDays    Int?
  images                String[]
  unit                  String           @default("per_person") // per_person, per_plate, per_event
  isActive              Boolean          @default(true)
  adminNotes            String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  eventCateringServices EventCateringService[]

  @@map("catering_services")
}

// Equipment model
model Equipment {
  id                String           @id @default(cuid())
  name              String
  description       String?
  category          EquipmentCategory
  price             Float
  dailyRentalPrice  Float?
  weeklyRentalPrice Float?
  monthlyRentalPrice Float?
  securityDeposit   Float?
  brand             String?
  model             String?
  serialNumber      String?
  specifications    Json?
  dimensions        String?
  weight            Float?
  color             String?
  condition         String?
  advanceBookingDays Int?
  availableFrom     DateTime?
  unit              String           @default("per_day") // per_day, per_hour, per_event
  status            EquipmentStatus  @default(AVAILABLE)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  eventEquipmentRentals EventEquipmentRental[]

  @@map("equipment")
}

// Event Catering Service junction model
model EventCateringService {
  id                          String         @id @default(cuid())
  eventId                     String
  cateringServiceId           String
  quantity                    Int
  unitPrice                   Float
  totalPrice                  Float
  customInstructions          String?
  specialDietaryRequirements  String?
  isConfirmed                 Boolean        @default(false)
  isDelivered                 Boolean        @default(false)
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt

  // Relations
  event            Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  cateringService  CateringService @relation(fields: [cateringServiceId], references: [id], onDelete: Cascade)

  @@unique([eventId, cateringServiceId])
  @@map("event_catering_services")
}

// Event Equipment Rental junction model
model EventEquipmentRental {
  id              String   @id @default(cuid())
  eventId         String
  equipmentId     String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  startDate       DateTime
  endDate         DateTime
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  rentalDays      Int?
  dailyRate       Float?
  securityDeposit Float?
  deliveryDate    DateTime?
  pickupDate      DateTime?
  damageCost      Float?
  deliveryAddress String?
  deliveryNotes   String?
  adminNotes      String?
  status          String?  // CONFIRMED, PENDING, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([eventId, equipmentId])
  @@map("event_equipment_rentals")
}